#----------------Settings:----------------------------------------------

# The config file must be in the same place as were we're running
#configfile:"/home/dsobral/vcall/config_conda.yaml"
# Or when running snakemake specify --directory so this file can be found
configfile:"config_hg38.yaml"

#|_________Threading_sets:___________|

bwa_samblaster_sambamba_threads = config["BWA_samblaster_sambamba_threads"]
gatk_baserecalibrator_threads = config["GATK_baserecalibrator_threads"]
gatk_applyrecalibration_threads = config["GATK_applyrecalibration_threads"]
call_variants_threads = config["Call_Variants_threads"]
normal_vs_tumor_threads = config["Normal_VS_Tumor_threads"]

#|__________Dir_settings:____________|

sample_dir = config["sample_dir"] 
output_dir = config["output_dir"] 
logs_dir = config["logs_dir"]
tmp_dir = config["tmp_dir"]

#Annotation
annovar_dir = config["annovar_dir"]


GENOME_BASE = config["GENOME_BASE"]
dbsnp = config["dbsnp"]
millsindels = config["millsindels"]
knownindels = config["knownindels"]
hapmap = config["hapmap"]
omni = config["omni"]

SAMPLIST = config["SAMPLIST"] #

L_TARGET = config["TARGET"] #
C_TARGET = config["TARGET_C"] # improvised solution 
COSMIC = config["COSMIC"]

#|___________________________________|
#------------------------------------------------------------------------
rule bwa_index:
	input:
		fa = GENOME_BASE + ".fasta" # GENOME = b37_human_g1k_v37_decoy.chr20
	output:
		GENOME_BASE + '.fasta.sa'
	message:
		'Building index -> {output}'
	shell:
		'bwa index {input.fa}' 

rule BWA_samblaster_sambamba: #Align reads to reference (using BWA); 
	input:
	 	index = GENOME_BASE + '.fasta.sa', # GENOME = b37_human_g1k_v37_decoy.chr20
		ref = GENOME_BASE + '.fasta',
		r_fow = sample_dir + '{sample}.read1.fastq.gz',#R1
		r_rev = sample_dir + '{sample}.read2.fastq.gz' #R2
	output:
		align = output_dir + '{sample}.alignment.bam'
		#log = 'mnt/share/repo/example_dataset/BSS.NA12878.20p12.1.30x.log'
	threads: bwa_samblaster_sambamba_threads
	shell: 
		'bwa mem -t {threads} -R "@RG\\tID:{wildcards.sample}\\tPL:ILLUMINA\\tSM:{wildcards.sample}" -M {input.ref} {input.r_fow} {input.r_rev} | '
		'samblaster -M |'
		'sambamba view -S -f bam -l 0 /dev/stdin |'#/dev/stdin 
		'sambamba sort -m 4G --tmpdir={tmp_dir} -t {threads} -o {output.align} /dev/stdin 2>&1 ' #> {output.log}' #/dev/stdin 


rule picard_dict:
	input:
		GENOME_BASE + '.fasta'
	output:
		GENOME_BASE + '.dict'
	shell:
		'picard CreateSequenceDictionary R={input} O={output}'

rule samtools_index:
	input:
		GENOME_BASE + '.fasta'
	output:
		GENOME_BASE + '.fasta.fai'
	shell:
		'samtools faidx {input}'

rule gatk_BaseRecalibrator: 
	input:
		#jar = jar_dir + 'gatk-3.8/GenomeAnalysisTK.jar',
		ref = GENOME_BASE + '.fasta',
		fai = GENOME_BASE + '.fasta.fai',
		dict = GENOME_BASE + '.dict',
		dbsnp = dbsnp,
		millsindels = millsindels,#
		knownindels = knownindels,
		reads = output_dir + '{sample}.alignment.bam', #single_sample
		#L = intervalfile
		#l_target = sample_dir + TARGET
	threads: gatk_baserecalibrator_threads
	output:
		recal_data = output_dir + '{sample}.sorted.bam_pre_recal_data.grp', #"$sample"
		base_recal = logs_dir +'{sample}.base_recal.qsub'#/logs
	shell:
		'gatk3 -Xmx4g -Djava.io.tmpdir={tmp_dir} \
		-T BaseRecalibrator -R {input.ref} -nct {threads} \
		-knownSites {input.dbsnp} \
		-knownSites {input.millsindels} \
		-knownSites {input.knownindels} \
		-I {input.reads} \
		-o {output.recal_data} --interval_padding 100 ' + L_TARGET + ' > {output.base_recal}'


rule Apply_recalibration: 
	input:
		#jar = jar_dir +'gatk-3.8/GenomeAnalysisTK.jar',
		fa = GENOME_BASE + ".fasta",
		bqsr = output_dir +'{sample}.sorted.bam_pre_recal_data.grp',
		reads = output_dir + '{sample}.alignment.bam'#,
		#pdf_log = logs_dir + '{sample}.sorted.bam_plots.pdf'
	threads: gatk_applyrecalibration_threads
	output:
		recal = output_dir + '{sample}.sorted.nodups.realigned.recal.bam',
		apply_recal = logs_dir + '{sample}.apply_recal.qsub'
	shell:
		'gatk3 -Xmx4g -Djava.io.tmpdir={tmp_dir} \
		-T PrintReads \
		-R {input.fa} --filter_bases_not_stored -nct {threads} \
		-I {input.reads} \
		-BQSR {input.bqsr} \
		-o {output.recal} \
		> {output.apply_recal}'

rule Call_Variants:
	input:
		#jar = jar_dir +'gatk-3.8/GenomeAnalysisTK.jar',
		fa = GENOME_BASE + ".fasta",
		recal = output_dir + '{sample}.sorted.nodups.realigned.recal.bam',
		dbsnp = dbsnp
	output:
		site = output_dir + '{sample}.gvcf.gz',
		logs = logs_dir + '{sample}.call_vars.qsub'
	threads: call_variants_threads
	shell:
		'gatk3 -Xmx4g -Djava.io.tmpdir={tmp_dir} \
		-T HaplotypeCaller -rf BadCigar -R {input.fa} \
		-ip 100 \
		-I {input.recal} \
		-stand_call_conf 10  --filter_bases_not_stored --emitRefConfidence GVCF \
		--dbsnp {input.dbsnp} -variant_index_type LINEAR -variant_index_parameter 128000 \
		-nct {threads} \
		-o {output.site} ' + L_TARGET + ' > {output.logs}' 
		# in case of exons (WES vs WGS) 


rule Genotype_Variants:
	input:
		fa = GENOME_BASE + ".fasta",
		dbsnp = dbsnp,
		samplist = SAMPLIST
	output:
		site = output_dir + 'genotype_vars.vcf.gz',
		logs = logs_dir + 'genotype_vars.qsub'
	threads: call_variants_threads
	shell:
		'gatk3 -Xmx4g -Djava.io.tmpdir={tmp_dir} \
		-T GenotypeGVCFs -R {input.fa} \
		-ip 100 --max_alternate_alleles 5 \
		-V {input.samplist} \
		--dbsnp {input.dbsnp} \
		-nt {threads} \
		-o {output.site} ' + L_TARGET + ' > {output.logs}' 
		# in case of exons (WES vs WGS) 


#VS
rule Normal_VS_Tumor:
	input:
		ref = GENOME_BASE + ".fasta",
		tumor = output_dir + '{sample2}.T.sorted.nodups.realigned.recal.bam',#non_dinamic.bam #sample2
		normal = output_dir + '{sample2}.N.sorted.nodups.realigned.recal.bam',#non_dinamic.bam #sample2
		dbSNP = dbsnp
		#recal = output_dir + '{sample}.sorted.nodups.realigned.recal.bam',
	output:
		output_dir + '{sample2}.Normal_VS_Tumor_output.vcf' #sample2
	threads: normal_vs_tumor_threads
	shell:
		'gatk3 -Xmx16g -Djava.io.tmpdir={tmp_dir} \
      		-T MuTect2 -rf BadCigar --filter_bases_not_stored \
      		-R {input.ref} \
      		-I:tumor {input.tumor} \
      		-I:normal {input.normal} \
    		-nct {threads} \
      		--dbsnp {input.dbSNP} ' + COSMIC + ' ' + L_TARGET + ' -o {output}'

rule Recalibrate_Variants:
	input:
		fa = GENOME_BASE + ".fasta",
		hapmap = hapmap,
		omni = omni,
		knownindels = knownindels,
		dbsnp = dbsnp,
		millsindels = millsindels,
		sample = output_dir + 'genotype_vars.vcf.gz'
	output:
		site = output_dir + 'genotype_vars.recalibrated.vcf.gz',
		logs = logs_dir + 'genotype_vars.recalibrated.logs'
	shell:
		'gatk3 -Xmx16g -Djava.io.tmpdir={tmp_dir} \
		-T VariantRecalibrator -R {input.fa} \
		-input {input.sample} \
		-resource:hapmap,known=false,training=true,truth=true,prior=15.0 \
		{hapmap} \
		-resource:omni,known=false,training=true,truth=true,prior=12.0 \
		{omni} \
		-resource:1000G,known=false,training=true,truth=false,prior=10.0 \
		{knownindels} \
		-resource:dbsnp,known=true,training=false,truth=false,prior=2.0 \
		{dbsnp} \
		-titv 2.8 -an DP -an QD -an FS -an MQRankSum -an SOR -an ReadPosRankSum \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 --maxGaussians 4 \
		-recalFile {tmp_dir}tmp.recalibrated_SNP.recal \
		-tranchesFile {tmp_dir}tmp.recalibrated_SNP.tranches \
		-rscriptFile {tmp_dir}tmp.recalibrated_SNP_plots.R \
		 >> {output.logs}; \
		gatk3 -Xmx16g -Djava.io.tmpdir={tmp_dir} \
		-T ApplyRecalibration -R {input.fa} \
		-input {input.sample} \
		-recalFile {tmp_dir}tmp.recalibrated_SNP.recal \
		-tranchesFile {tmp_dir}tmp.recalibrated_SNP.tranches \
		-o {tmp_dir}tmp.recalibrated_SNP.vcf.gz \
		 >> {output.logs}; \
		gatk3 -Xmx16g -Djava.io.tmpdir={tmp_dir} \
		-T VariantRecalibrator -R {input.fa} \
		-input {tmp_dir}tmp.recalibrated_SNP.vcf.gz \
		-resource:mills,known=true,training=true,truth=true,prior=12.0 \
		{millsindels} \
		-an QD -an DP -an FS -an SOR -an MQRankSum -an ReadPosRankSum \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 --maxGaussians 4 \
		-recalFile {tmp_dir}tmp.recalibrated_indel.recal \
		-tranchesFile {tmp_dir}tmp.recalibrated_indel.tranches \
		-rscriptFile {tmp_dir}tmp.recalibrated_indel_plots.R \
		 >> {output.logs}; \
		gatk3 -Xmx16g -Djava.io.tmpdir={tmp_dir} \
		-T ApplyRecalibration -R {input.fa} \
		-input {tmp_dir}tmp.recalibrated_SNP.vcf.gz \
		-mode INDEL --ts_filter_level 99.9 \
		-recalFile {tmp_dir}tmp.recalibrated_indel.recal \
		-tranchesFile {tmp_dir}tmp.recalibrated_indel.tranches \
		-o {tmp_dir}tmp.recalibrated_SNP_indel.vcf.gz \
		 >> {output.logs}; \
		gatk3 -Xmx16g -Djava.io.tmpdir={tmp_dir} \
		-T CalculateGenotypePosteriors -R {input.fa} \
		--supporting {dbsnp} \
		-V {tmp_dir}tmp.recalibrated_SNP_indel.vcf.gz \
		-o {output.site} \
		 >> {output.logs}; \
		rm {tmp_dir}tmp.recalibrated_SNP.recal \
		{tmp_dir}tmp.recalibrated_indel.recal \
		{tmp_dir}tmp.recalibrated_SNP.tranches \
		{tmp_dir}tmp.recalibrated_indel.tranches \
		{tmp_dir}tmp.recalibrated_SNP_plots.R \
		{tmp_dir}tmp.recalibrated_indel_plots.R \
		{tmp_dir}tmp.recalibrated_SNP.vcf.gz \
		{tmp_dir}tmp.recalibrated_SNP_indel.vcf.gz ' 


rule Annotation_Conv:
	input:
		output_dir + '{sampleanconv}.{extan}'
	wildcard_constraints:
		extan="vcf|vcf.gz"
	output:
		output_dir + '{sampleanconv}.{extan}.annot'
	shell:
		'{annovar_dir}convert2annovar.pl -format vcf4 -allsample -includeinfo -withfreq {input} > {output}'


# May need to apply normalization before: https://annovar.openbioinformatics.org/en/latest/articles/VCF/
# bcftools norm -m-both -o ex1.step1.vcf ex1.vcf.gz
# bcftools norm -f human_g1k_v37.fasta -o ex1.step2.vcf ex1.step1.vcf
rule Annotation:
	input:
		output_dir + '{sampleanno}'
	output:
		output_dir + '{sampleanno}.hg38_multianno.txt'
	shell:
		'{annovar_dir}table_annovar.pl {input} {annovar_dir}humandb/ --buildver hg38 --remove \
		--protocol refGene,ensGene,avsnp150,clinvar_20190305,cosmic89_coding,ALL.sites.2015_08,exac03 \
		--operation g,g,f,f,f,f,f --nastring . --polish --otherinfo --outfile {input}; echo {output}'
			


